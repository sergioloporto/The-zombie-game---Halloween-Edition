/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _zombiegame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zombiegame */ "./src/js/zombiegame.js");
///////////////////////////////////////////////////////
//////////////     GLOBAL VARIABLES      //////////////
///////////////////////////////////////////////////////
var board = document.querySelector(".board"); //The whole game space

var cross = document.querySelector(".cross"); //The viewfinder

var navbarNameField = document.querySelector('.yourname'); ///////////////////////////////////////////////////////
//Preload shooting sounds and function to play sound //
///////////////////////////////////////////////////////

var shootSound = new Audio("sounds/380_gunshot_single-mike-koenig.mp3"); // License http://soundbible.com

shootSound.preload = 'auto';
shootSound.load();

function playShootingSound(volume) {
  var click = shootSound.cloneNode();
  click.volume = volume;
  click.play();
} ////////////////////////////////////////////////////////////
//Get the cursor position and assign it to the viewfinder//
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////
////////////       The login box              /////////
///////////////////////////////////////////////////////


function login() {
  var loginBox = document.querySelector('.login-box');
  var playBtn = document.querySelector('.startButton');
  playBtn.addEventListener('click', function (e) {
    e.preventDefault();
    loginBox.style.display = "none"; // The login box will disappear during the game

    loginBox.style.pointerEvents = "none"; // The pointer Events also must be disabled

    board.style.cursor = "none"; /////  Check if the user is logged in. If the user is logged in, write the name in the header.

    function checkIfLoggedin() {
      var yourName = document.getElementById('name').value;
      localStorage.setItem('zombiegameSavedName', yourName);

      if (localStorage.getItem("zombiegameSavedName") != null) {
        navbarNameField.innerText = "Player 1: ".concat(localStorage.zombiegameSavedName);
        board.addEventListener('mousemove', function (e) {
          cross.style.left = "".concat(e.pageX, "px");
          cross.style.top = "".concat(e.pageY, "px");
        }); ///// Play sound on shoot

        window.addEventListener('click', function () {
          playShootingSound(0.5);
        });
      }
    } // Always run the function to check if the user is logged in.
    // If the user logged in once and then reloads the page, has to log in once again,
    // and the localStorage value will be overwritten.
    // There is no need for name retention or logout. I want the game to start after clicking "play"


    checkIfLoggedin(); ////// Background music for level 1

    var zombieSound = new Audio("sounds/Zombie_Horde-Mike_Koenig-1926300541.mp3"); // License http://soundbible.com

    zombieSound.preload = 'auto';
    zombieSound.load();

    function playZombieSound(volumeValue) {
      var backgroundZombieSound = zombieSound.cloneNode();
      backgroundZombieSound.volume = volumeValue;
      backgroundZombieSound.play();
    }

    playZombieSound(1); ///// Start the game - Level 1

    Object(_zombiegame__WEBPACK_IMPORTED_MODULE_0__["zombieGame"])();
  });
} //// Start the login function, which in turn will start the Level one in case the player clicks on "Play"


login(); ///////////////////////////////////////////////////////
////////////       Import the game            /////////
///////////////////////////////////////////////////////



/***/ }),

/***/ "./src/js/zombiegame.js":
/*!******************************!*\
  !*** ./src/js/zombiegame.js ***!
  \******************************/
/*! exports provided: zombieGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zombieGame", function() { return zombieGame; });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

///////////////////////////////////////////////////////
///  Once again import the needed global variables   //
///////////////////////////////////////////////////////
var board = document.querySelector(".board"); //The whole game space
//////////////////////////////////////////////////////////////////////////////////
//Export the function, so that it can be run by the login() function in app.js  //
//////////////////////////////////////////////////////////////////////////////////

function zombieGame() {
  var shotsCounter = -1; //total number of shots (-1 because one will be used to login :) )

  var killed = 0; //total number of killed
  ///////////////////////////////////////////////////////
  ////////      Set the level number           //////////
  ///////////////////////////////////////////////////////

  var levelBox = document.querySelector('.level');
  levelBox.innerText = "Level 1"; ////// Create a zombie on each interval

  setInterval(function () {
    ////// Create a div with a zombie
    var zombie = document.createElement("div");
    zombie.classList.add("zombie"); ////// Increase the counter of Killed

    var shotsNumber = document.querySelector('.shots');
    zombie.addEventListener('click', function () {
      killed++;
      shotsNumber.innerText = "".concat(killed, "/").concat(shotsCounter);
    }); ////// Define the position of the zombies.

    var pos = 0;
    {
      // positions from the bottom
      var min = 20;
      var max = 230;
      pos = Math.floor(Math.random() * (max - min + 1) + min);
      zombie.style.bottom = "".concat(pos, "px");
    }
    {
      // Set the speed of the zombies
      var _min = 6;
      var _max = 20;
      var speed = Math.floor(Math.random() * (_max - _min + 1) + _min);
      zombie.style.animationDuration = "1s, ".concat(speed, "s");
    }
    {
      // Set the zombies position according to the perspective
      zombie.style.zIndex = 230 - pos;
    } // Delete the zombies as soon as the zombie goes out of the screen

    zombie.addEventListener("animationend", function () {
      this.remove();
    }); // Remove the killed zombies for a better and happier world

    zombie.addEventListener("click", function () {
      this.remove();
    }); // Add the newly created zombie to the game

    board.appendChild(zombie); // Force layout reflow: more on https://gist.github.com/paulirish/5d52fb081b3570c81e3a

    var divs = board.querySelectorAll("div.zombie");

    var positions = _toConsumableArray(divs).map(function (el) {
      return el.offsetLeft;
    });
  }, 800); // How often a new zombie is created
  ///////////////////////////////////////////////////////////
  // SHOTS Counter
  ////////////////////////////Count the shots////////////////

  function countTheShots() {
    var shotsNumber = document.querySelector('.shots');
    shotsNumber.innerText = "".concat(killed, "/").concat(shotsCounter);
    window.addEventListener('click', function () {
      shotsCounter++;
      shotsNumber.innerText = "killed ".concat(killed, "/").concat(shotsCounter, " total");
    });
  }

  countTheShots();
}

/***/ })

/******/ });
//# sourceMappingURL=bundle.min.js.map